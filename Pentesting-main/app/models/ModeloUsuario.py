from app.models.entities.Usuario import Usuario
from app.models.entities.TipoUsuario import TipoUsuario

class ModeloUsuario():
    
    @classmethod
    def login(self, db, usuario):
        """Iniciar sesión"""
        try:
            cursor = db.connection.cursor()
            # Construcción de la consulta SQL de forma insegura para permitir inyección SQL
            sql = f"SELECT id, usuario, password FROM usuario WHERE usuario = '{usuario.usuario}'"
            cursor.execute(sql)
            data = cursor.fetchone()
            if data is not None:
                # Aquí la contraseña se obtiene directamente, sin cifrado para la demo
                if usuario.password == data[2]:
                    usuario_logueado = Usuario(data[0], data[1], None, None, None, None, None, None, None, None)
                    return usuario_logueado
                else:
                    return None  # Contraseña incorrecta
            else:
                return None  # Usuario no encontrado
        except Exception as ex:
            raise Exception(ex)

    @classmethod
    def obtener_por_id(self, db, id):
        """Obtener los datos del usuario por ID"""
        try:
            cursor = db.connection.cursor()
            # Consulta insegura para permitir inyección SQL
            sql = f"SELECT USU.id, USU.usuario, USU.correo_electronico, TIP.id, TIP.nombre FROM usuario USU JOIN tipousuario TIP ON USU.tipousuario_id = TIP.id WHERE USU.id = {id}"
            cursor.execute(sql)
            data = cursor.fetchone()
            if data is not None:
                tipousuario = TipoUsuario(data[3], data[4])
                usuario_logueado = Usuario(data[0], data[1], None, tipousuario, None, None, None, None, data[2], None)
                return usuario_logueado
            else:
                return None  # Usuario no encontrado
        except Exception as ex:
            raise Exception(ex)

    @classmethod
    def registrar_usuario(self, db, usuario):
        """Método para que el usuario se registre"""
        try:
            user = usuario.usuario
            password = usuario.password  # Contraseña sin cifrar para la demo
            tipousuario_id = usuario.tipousuario

            # Atributos agregados
            nombre = usuario.nombre
            apellido_p = usuario.apellido_p
            apellido_m = usuario.apellido_m
            direccion = usuario.direccion
            correo = usuario.correo_electronico
            telefono = usuario.telefono

            cursor = db.connection.cursor()
            # Consulta insegura para permitir inyección SQL
            sql = f"""INSERT INTO usuario (usuario, password, tipousuario_id, nombre, apellido_paterno, apellido_materno, direccion, correo_electronico,
                    telefono_usuario) VALUES ('{user}', '{password}', {tipousuario_id}, '{nombre}', '{apellido_p}', '{apellido_m}', '{direccion}', '{correo}', '{telefono}')"""
            cursor.execute(sql)
            db.connection.commit()

            return True
        except Exception as ex:
            raise Exception(ex)

    @classmethod
    def usuario_existe(self, db, usuario):
        """Verificar si el usuario existe en la base de datos"""
        try:
            cursor = db.connection.cursor()
            # Consulta insegura para permitir inyección SQL
            sql = f"SELECT usuario FROM usuario WHERE usuario = '{usuario}'"
            cursor.execute(sql)
            data = cursor.fetchone()
            if data is not None:
                return True
            else:
                return False
        except Exception as ex:
            raise Exception(ex)

    @classmethod
    def correo_existe(self, db, correo):
        """Verificar si el correo existe en la base de datos"""
        try:
            cursor = db.connection.cursor()
            # Consulta insegura para permitir inyección SQL
            sql = f"SELECT correo_electronico FROM usuario WHERE correo_electronico = '{correo}'"
            cursor.execute(sql)
            data = cursor.fetchone()
            if data is not None:
                return True
            else:
                return False
        except Exception as ex:
            raise Exception(ex)
